/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.ponto;

import dao.DAOFactory;
import dao.ponto.PontoDAO;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import model.ponto.Ponto;
import model.ponto.PontosTableModel;
import utilitarios.FormatarData;
import utilitarios.ponto.AdvancedConfigurations;
import utilitarios.ponto.Session;
import view.Menu;

/**
 *
 * @author guilherme.oliveira
 */
public class UIAutomacaoPonto extends javax.swing.JInternalFrame {

    private AdvancedConfigurations advanced = new AdvancedConfigurations();
    private Session session = new Session();
    private PontosTableModel pontosTableModel = new PontosTableModel();
    private PontoDAO dao;

    /**
     * Creates new form UIAutomacaoPonto
     */
    public UIAutomacaoPonto() {
        initComponents();
        this.dao = DAOFactory.getPONTODAO();
        preencherComDataDeHoje();
        buscarPontos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtPontos = new javax.swing.JTable();
        jlNomeFuncionario = new javax.swing.JLabel();
        jtfNomeFuncionario = new javax.swing.JTextField();
        jtfNomeRelogio = new javax.swing.JTextField();
        jlNomeRelogio = new javax.swing.JLabel();
        jftfDataInicio = new javax.swing.JFormattedTextField();
        jftfDataTermino = new javax.swing.JFormattedTextField();
        jlDataInicio = new javax.swing.JLabel();
        jlDataTermino = new javax.swing.JLabel();
        jbPesquisar = new javax.swing.JButton();
        jbLimparFiltros = new javax.swing.JButton();
        jbHoje = new javax.swing.JButton();
        jbBaixarAfd = new javax.swing.JButton();
        jmbAutomacaoPonto = new javax.swing.JMenuBar();
        jmCadastro = new javax.swing.JMenu();
        jmiRelogioPonto = new javax.swing.JMenuItem();

        setClosable(true);
        setIconifiable(true);
        setTitle("Automação de Ponto");

        jtPontos.setModel(new PontosTableModel());
        jScrollPane1.setViewportView(jtPontos);

        jlNomeFuncionario.setText("Colaborador");

        jtfNomeFuncionario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfNomeFuncionarioKeyPressed(evt);
            }
        });

        jtfNomeRelogio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfNomeRelogioKeyPressed(evt);
            }
        });

        jlNomeRelogio.setText("Relógio");

        try {
            jftfDataInicio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jftfDataInicio.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        jftfDataInicio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jftfDataInicioKeyPressed(evt);
            }
        });

        try {
            jftfDataTermino.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jftfDataTermino.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        jftfDataTermino.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jftfDataTerminoKeyPressed(evt);
            }
        });

        jlDataInicio.setText("De");

        jlDataTermino.setText("Até");

        jbPesquisar.setText("Pesquisar");
        jbPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPesquisarActionPerformed(evt);
            }
        });

        jbLimparFiltros.setText("Limpar Filtros");
        jbLimparFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimparFiltrosActionPerformed(evt);
            }
        });

        jbHoje.setText("Hoje");
        jbHoje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbHojeActionPerformed(evt);
            }
        });

        jbBaixarAfd.setText("Baixar AFD");
        jbBaixarAfd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBaixarAfdActionPerformed(evt);
            }
        });

        jmCadastro.setText("Cadastro");

        jmiRelogioPonto.setText("Relógios Ponto");
        jmiRelogioPonto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiRelogioPontoActionPerformed(evt);
            }
        });
        jmCadastro.add(jmiRelogioPonto);

        jmbAutomacaoPonto.add(jmCadastro);

        setJMenuBar(jmbAutomacaoPonto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfNomeFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlNomeFuncionario))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfNomeRelogio, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlNomeRelogio))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jftfDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlDataInicio))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlDataTermino)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jftfDataTermino, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbHoje)
                                .addGap(18, 18, 18)
                                .addComponent(jbLimparFiltros)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbPesquisar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)
                                .addComponent(jbBaixarAfd)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlNomeFuncionario)
                    .addComponent(jlNomeRelogio)
                    .addComponent(jlDataInicio)
                    .addComponent(jlDataTermino))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfNomeFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfNomeRelogio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jftfDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jftfDataTermino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbPesquisar)
                    .addComponent(jbLimparFiltros)
                    .addComponent(jbHoje)
                    .addComponent(jbBaixarAfd))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiRelogioPontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiRelogioPontoActionPerformed
        //abre tela de manutenção de relogios ponto
        UIManRelogioPonto telaManREP = new UIManRelogioPonto();
        if (!telaManREP.isVisible()) {
            telaManREP.setVisible(true);
        }
    }//GEN-LAST:event_jmiRelogioPontoActionPerformed

    private void jbPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPesquisarActionPerformed
        buscarPontos();
    }//GEN-LAST:event_jbPesquisarActionPerformed

    private void jtfNomeFuncionarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfNomeFuncionarioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            buscarPontos();
        }
    }//GEN-LAST:event_jtfNomeFuncionarioKeyPressed

    private void jtfNomeRelogioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfNomeRelogioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            buscarPontos();
        }
    }//GEN-LAST:event_jtfNomeRelogioKeyPressed

    private void jftfDataInicioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jftfDataInicioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            buscarPontos();
        }
    }//GEN-LAST:event_jftfDataInicioKeyPressed

    private void jftfDataTerminoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jftfDataTerminoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            buscarPontos();
        }
    }//GEN-LAST:event_jftfDataTerminoKeyPressed

    private void jbLimparFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimparFiltrosActionPerformed
        limparFiltros();
        buscarPontos();
    }//GEN-LAST:event_jbLimparFiltrosActionPerformed

    private void jbHojeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbHojeActionPerformed
        preencherComDataDeHoje();
    }//GEN-LAST:event_jbHojeActionPerformed

    private void jbBaixarAfdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBaixarAfdActionPerformed
        try {
            String caminho = System.getProperty("java.io.tmpdir") + File.separator + "arquivoAFD.txt";
            FileWriter arq = new FileWriter(caminho);

            PrintWriter gravarArq = new PrintWriter(arq);

            String query = "";

            if (!jtfNomeFuncionario.getText().isEmpty()) {
                query += " and PFUNC.NOME LIKE '%" + jtfNomeFuncionario.getText() + "%'";
            }

            if (!jtfNomeRelogio.getText().isEmpty()) {
                query += " and DOLPHIN_REP.NOME LIKE '%" + jtfNomeRelogio.getText() + "%'";
            }

            if (!jftfDataInicio.getText().equals("  /  /    ") && !jftfDataTermino.getText().equals("  /  /    ")) {

                String dataInicio = FormatarData.formatarData(jftfDataInicio.getText());
                String dataTermino = FormatarData.formatarData(jftfDataTermino.getText());
                query += " and DATA BETWEEN ('" + dataInicio + "')"
                        + " and ('" + dataTermino + "')";
            }
            ArrayList<Ponto> pontos = dao.buscar(query);

            for (Ponto ponto : pontos) {
                gravarArq.printf(ponto.getCompleto() + "%n");
            }//for
            
            arq.close();
            
            File arquivoSalvo = new File(caminho);
            Desktop.getDesktop().open(arquivoSalvo);   

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                    "Erro ao baixar arquivo AFD! " + e.getMessage(),
                    "Erro ao baixar arquivo AFD",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbBaixarAfdActionPerformed

    /**
     * Método usado para limpar filtros e preencher a data de hoje
     */
    private void limparFiltros() {
        jtfNomeFuncionario.setText("");
        jtfNomeRelogio.setText("");
        preencherComDataDeHoje();
    }//limparFiltros

    /**
     * Método usado para preencher campos data de início e término com a data de
     * hoje
     */
    private void preencherComDataDeHoje() {
        LocalDateTime dataAtual = LocalDateTime.now();
        jftfDataInicio.setText(String.valueOf(dataAtual
                .format(DateTimeFormatter
                        .ofPattern("dd/MM/yyyy HH:mm"))));
        jftfDataTermino.setText(String.valueOf(dataAtual
                .format(DateTimeFormatter
                        .ofPattern("dd/MM/yyyy HH:mm"))));
    }//preencherComDataDeHoje

    /**
     * Método usado para buscar/filtrar tabela de pontos
     */
    private void buscarPontos() {
        Menu.jpbBarraProgresso.setIndeterminate(true);
        Menu.jpbBarraProgresso.setVisible(true);

        new Thread() {
            @Override
            public void run() {

                try {
                    pontosTableModel.clear();

                    String query = "";
                    String dataInicio = FormatarData.formatarData(jftfDataInicio.getText());
                    String dataTermino = FormatarData.formatarData(jftfDataTermino.getText());

                    if (!jtfNomeFuncionario.getText().isEmpty()) {
                        query += " and PFUNC.NOME LIKE '%" + jtfNomeFuncionario.getText() + "%'";
                    }

                    if (!jtfNomeRelogio.getText().isEmpty()) {
                        query += " and DOLPHIN_REP.NOME LIKE '%" + jtfNomeRelogio.getText() + "%'";
                    }

                    if (!jftfDataInicio.getText().equals("  /  /    ") || !jftfDataTermino.getText().equals("  /  /    ")) {
                        query += " and DATA BETWEEN ('" + dataInicio + "')"
                                + " and ('" + dataTermino + "')";
                    }
                    ArrayList<Ponto> pontos = dao.buscar(query);

                    for (Ponto ponto : pontos) {
                        pontosTableModel.addRow(ponto);
                    }//for

                    jtPontos.setModel(pontosTableModel);

                    if (pontos.isEmpty()) {
                        JOptionPane.showMessageDialog(
                                UIAutomacaoPonto.this,
                                "Nenhum retorno para essa consulta!"
                        );
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null,
                            e.getMessage(),
                            "Erro ao buscar pontos! ",
                            JOptionPane.ERROR_MESSAGE);
                } finally {
                    Menu.jpbBarraProgresso.setIndeterminate(false);
                    Menu.jpbBarraProgresso.setVisible(false);
                }//finally
            }//run
        }.start();
    }//buscarPontos

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbBaixarAfd;
    private javax.swing.JButton jbHoje;
    private javax.swing.JButton jbLimparFiltros;
    private javax.swing.JButton jbPesquisar;
    private javax.swing.JFormattedTextField jftfDataInicio;
    private javax.swing.JFormattedTextField jftfDataTermino;
    private javax.swing.JLabel jlDataInicio;
    private javax.swing.JLabel jlDataTermino;
    private javax.swing.JLabel jlNomeFuncionario;
    private javax.swing.JLabel jlNomeRelogio;
    private javax.swing.JMenu jmCadastro;
    private javax.swing.JMenuBar jmbAutomacaoPonto;
    private javax.swing.JMenuItem jmiRelogioPonto;
    private javax.swing.JTable jtPontos;
    private javax.swing.JTextField jtfNomeFuncionario;
    private javax.swing.JTextField jtfNomeRelogio;
    // End of variables declaration//GEN-END:variables

}//classe

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.os;

import dao.Critica;
import dao.DAOFactory;
import dao.os.TipoOsDAO;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import model.os.TipoOs;
import model.os.TipoTableModel;
import view.Menu;

/**
 *
 * @author guilherme.oliveira
 */
public class UIManTipo extends javax.swing.JDialog {

    private TipoTableModel tiposModel = new TipoTableModel();
    private UIControleOS uiControleOS;
    private TipoOsDAO dao;
    /**
     * Creates new form TipoView
     */
    public UIManTipo() {
    }

    /**
     * Creates new form UIManTipo
     */
    public UIManTipo(UIControleOS uiControleOS) {
        initComponents();
        this.uiControleOS = uiControleOS;
        dao = DAOFactory.getTIPOOSDAO();
        preencherComboBoxTipo();
    }

    public TipoTableModel getTiposModel() {
        return tiposModel;
    }

    public JComboBox<TipoOs> getJcbTipo() {
        return jcbTipo;
    }

    public void preencherComboBoxTipo() {
        try {
            for (TipoOs t : dao.filtrar("")) {
                jcbTipo.addItem(t);
            }
        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, se.getMessage());
        }//fecha catch 
    }//fecha preencherCombo
    
    public void buscar() {
        try {
            String query;

            TipoOs tipo = (TipoOs) jcbTipo.getSelectedItem();

            if (tipo.getCodTipoOs() == 1) {
                query = "WHERE CODTIPOOS <> 1";
            } else {
                query = "WHERE CODTIPOOS = " + tipo.getCodTipoOs();
            }
            ArrayList<TipoOs> tipos = dao.filtrar(query);

            for (TipoOs tipoOs : tipos) {
                tiposModel.addRow(tipoOs);
            }//fecha for
            jtaTipo.setModel(tiposModel);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),
                    "Erro ao buscar tipos da OS/Tarefa", JOptionPane.ERROR_MESSAGE);
        }
    }//filtrar

    public void excluir(TipoOs tipo) {
        try {
            
            dao.excluir(tipo);
            
            tiposModel.removeRow(tipo);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),
                    "Erro ao excluir tipo", JOptionPane.ERROR_MESSAGE);
        }//fecha catch
    }//fecha excluir

    public TipoOs getTipoSelecionado() {
        if (jtaTipo.getSelectedRow() == -1) {
            return null;
        }

        return tiposModel.getTipoOs().get(jtaTipo.getSelectedRow());
    }//fecha getTipo
    
    public void atualizarTblTipos() {
        tiposModel.clear();
        buscar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcbTipo = new javax.swing.JComboBox<TipoOs>();
        jlTipo = new javax.swing.JLabel();
        jbCadTipo = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jbEditar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaTipo = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manutenção de tipo");
        setModal(true);

        jcbTipo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbTipoItemStateChanged(evt);
            }
        });

        jlTipo.setText("Tipo");

        jbCadTipo.setText("Novo");
        jbCadTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCadTipoActionPerformed(evt);
            }
        });

        jbExcluir.setText("Excluir");
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbEditar.setText("Editar");
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });

        jtaTipo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtaTipo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtaTipoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtaTipo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jcbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                        .addComponent(jbCadTipo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbExcluir))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlTipo)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jlTipo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbEditar)
                    .addComponent(jbExcluir)
                    .addComponent(jbCadTipo))
                .addContainerGap(321, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(65, 65, 65)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbCadTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCadTipoActionPerformed
        new UICadTipos(null, this).setVisible(true);
    }//GEN-LAST:event_jbCadTipoActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        TipoOs tipo = getTipoSelecionado();
        if (tipo == null) {
            JOptionPane.showMessageDialog(this, "Selecione o tipo que deseja excluir!");
        } else {
            Object[] options = {"Sim", "Não"};
            int i = JOptionPane.showOptionDialog(null,
                    "Tem certeza que deseja excluir?", "Excluir",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                    options, options[0]);
            if (i == JOptionPane.YES_OPTION) {
                try {
                    boolean podeExcluirOS = Critica.podeExcluir("ORDEMSERVICO", "CODTIPOOS", getTipoSelecionado().getCodTipoOs(), "cadastro de OS/Tarefa");
                    if (podeExcluirOS) {
                        excluir(tipo);
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Erro ao tentar criticar", JOptionPane.ERROR_MESSAGE);
                }//catch
            }//if
        }//else
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
        if (getTipoSelecionado() != null) {
            new UICadTipos(getTipoSelecionado(), this).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Selecione o tipo para editar!",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbEditarActionPerformed

    private void jtaTipoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtaTipoMouseClicked
        if (evt.getClickCount() == 2) {
            new UICadTipos(getTipoSelecionado(), this).setVisible(true);
        }
    }//GEN-LAST:event_jtaTipoMouseClicked

    private void jcbTipoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbTipoItemStateChanged
        atualizarTblTipos();
    }//GEN-LAST:event_jcbTipoItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UIManTipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UIManTipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UIManTipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UIManTipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UIManTipo dialog = new UIManTipo();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbCadTipo;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JComboBox<TipoOs> jcbTipo;
    private javax.swing.JLabel jlTipo;
    private javax.swing.JTable jtaTipo;
    // End of variables declaration//GEN-END:variables

    
}

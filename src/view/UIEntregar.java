/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import cis.sdk.CisBiox;
import dao.DAOFactory;
import dao.FichaEpiDAO;
import exceptions.RetornosException;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import model.Funcionario;

/**
 *
 * @author guilherme.oliveira
 */
public class UIEntregar extends javax.swing.JInternalFrame {

    public static byte[] digital;
    private UIFuncionario parent;
    private UIC uiCa;
    public static int senha = 1;
    private UIEntregar entregar = this;

    /**
     * Creates new form UIAutenticacao
     */
    public UIEntregar(UIC uiCa) {
        initComponents();
        this.uiCa = uiCa;
        this.parent = uiCa.getUiFuncionario();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlSenha = new javax.swing.JLabel();
        jpfSenha = new javax.swing.JPasswordField();
        jlOk = new javax.swing.JLabel();
        jbLerDigital = new javax.swing.JButton();
        jbDigitarSenha = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Entregar");

        jlSenha.setText("Senha");

        jpfSenha.setEnabled(false);
        jpfSenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jpfSenhaKeyPressed(evt);
            }
        });

        jlOk.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jlOk.setForeground(new java.awt.Color(51, 102, 255));
        jlOk.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jbLerDigital.setText("Ler Digital");
        jbLerDigital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLerDigitalActionPerformed(evt);
            }
        });

        jbDigitarSenha.setText("Digitar Senha");
        jbDigitarSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDigitarSenhaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jlOk, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                        .addComponent(jlSenha)
                        .addComponent(jpfSenha))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbLerDigital, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbDigitarSenha)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlSenha)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpfSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlOk, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbLerDigital, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbDigitarSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método usado para entregar EPI ao pressionar a tecla ENTER do teclado
     *
     * @param evt
     */
    private void jpfSenhaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jpfSenhaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                String strSenha = String.valueOf(jpfSenha.getPassword());
                senha = Integer.parseInt(strSenha);
                Funcionario funcionario = parent.getFuncionario();
                if (senha == funcionario.getSenha()) {
                    parent.cadastrarFichaEpi();
                    parent.inserirHistorico();
                    this.dispose();
                } else {
                    jpfSenha.setText("");
                    jpfSenha.requestFocus();
                    JOptionPane.showMessageDialog(null, "Senha incorreta!");
                }
            } catch (HeadlessException | NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "" + nfe.getMessage());
            }
        }
    }//GEN-LAST:event_jpfSenhaKeyPressed

    /**
     * Método usado para ler digital do funcionário
     *
     * @param evt
     */
    private void jbLerDigitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLerDigitalActionPerformed
        lerDigital();
    }//GEN-LAST:event_jbLerDigitalActionPerformed

    /**
     * Método usado para entregar EPI ao digitar
     *
     * @param evt
     */
    private void jbDigitarSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDigitarSenhaActionPerformed
        // TODO add your handling code here:
        Funcionario funcionario = parent.getFuncionario();
        if (funcionario.getSenha() != 0) {
            jpfSenha.setEnabled(true);
            jpfSenha.requestFocus();

        } else {
            JOptionPane.showMessageDialog(null, "Senha não cadastrada!",
                    "Erro ao autenticar senha!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbDigitarSenhaActionPerformed

    /**
     * Método usado para ler digital do funcionário
     */
    public void lerDigital() {
        Funcionario funcionario = parent.getFuncionario();
        //testa se funcionario tem alguma digital cadatrada
        if (funcionario.getFinger1() != null || funcionario.getFinger2() != null || funcionario.getFinger3() != null
                || funcionario.getFinger4() != null || funcionario.getFinger5() != null || funcionario.getFinger6() != null) {
            CisBiox biox = new CisBiox();
            try {

                int iRetorno = biox.iniciar();

                jlOk.setText("Coloque o dedo!");
                jlOk.setForeground(Color.blue);

                if (iRetorno != 1) {
                    throw new RetornosException(iRetorno);
                }

                digital = biox.capturarDigital();

                if (biox.getResultado() != 1) {
                    biox.finalizar();
                    jlOk.setText(biox.mensagens(biox.getResultado()));
                    jlOk.setForeground(Color.red);
                }

                iRetorno = biox.finalizar();

                if (iRetorno != 1) {
                    jlOk.setText(biox.mensagens(iRetorno));
                    jlOk.setForeground(Color.red);
                    return;
                }

                iRetorno = biox.iniciar();

                if (iRetorno != 1) {
                    throw new RetornosException(iRetorno);
                }

                byte[][] digitais = new byte[6][699];
                digitais[0] = funcionario.getFinger1();
                digitais[1] = funcionario.getFinger2();
                digitais[2] = funcionario.getFinger3();
                digitais[3] = funcionario.getFinger4();
                digitais[4] = funcionario.getFinger5();
                digitais[5] = funcionario.getFinger6();

                for (int i = 0; i < digitais.length; i++) {
                    iRetorno = biox.compararDigital(digital, digitais[i]);
                    if (iRetorno == 1) {
                        break;
                    }
                }//fecha for
                switch (iRetorno) {
                    case 1:
                        jlOk.setText("Digital encontrada!");
                        jlOk.setForeground(Color.green);
                        FichaEpiDAO dao = DAOFactory.getFICHAEPIDAO();
                        parent.setCodFichaEpi(dao.cadastrarFicha());
                        parent.inserirHistorico();
                        parent.getUiControleEpi().atualizarTblHistorico();
                        this.dispose();
                        break;
                    case -2:
                        jlOk.setText("Digital não encontrada!");
                        jlOk.setForeground(Color.red);
                        break;
                    default:
                        jlOk.setText(biox.mensagens(iRetorno));
                        jlOk.setForeground(Color.red);
                        break;
                }

                biox.finalizar();
            } catch (NullPointerException ne) {
                biox.finalizar();
                jlOk.setText("Erro ao ler digital! ");
                jlOk.setForeground(Color.red);
            } catch (RetornosException re) {
                biox.finalizar();
                jlOk.setText("Erro ao ler digital! " + re.getMessage());
                jlOk.setForeground(Color.red);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), 
                        "Erro ao Entrgar EPI", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nenhuma digital cadastrada!",
                    "Erro ao ler digital", JOptionPane.ERROR_MESSAGE);
        }
    }//fecha lerDigital

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton jbDigitarSenha;
    private javax.swing.JButton jbLerDigital;
    private static javax.swing.JLabel jlOk;
    private javax.swing.JLabel jlSenha;
    private javax.swing.JPasswordField jpfSenha;
    // End of variables declaration//GEN-END:variables

}

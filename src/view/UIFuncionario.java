package view;

import dao.DAOFactory;
import dao.EpiFuncionarioDAO;
import dao.FichaEpiDAO;
import dao.LocalDAO;
import dao.TicketDAO;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import model.Epi;
import model.EpiFuncionario;
import model.EpiFuncionarioTableModel;
import model.EpiTableModel;
import model.FichaEpi;
import model.Funcionario;
import model.FuncionarioTableModel;
import model.HistoricoTableModel;
import model.Local;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import persistencia.ConexaoBanco;
import services.EpiFuncionarioServicos;
import services.EpiServicos;
import services.LocalServicos;
import services.ServicosFactory;
import utilitarios.EmailJava;

/**
 *
 * @author guilherme.oliveira
 */
public class UIFuncionario extends javax.swing.JInternalFrame {

    //referencias
    private final UIControleEpi uiControleEpi;
    private Funcionario funcionario;
    private final EpiTableModel eTableModel = new EpiTableModel();
    private final HistoricoTableModel hTableModel = new HistoricoTableModel();
    private final FuncionarioTableModel fTableModel = new FuncionarioTableModel();
    private final EpiFuncionarioTableModel efTableModel = new EpiFuncionarioTableModel();
    private UIDevolver uiDevolver;
    private boolean flagRelatorio;
    private int codFichaEpi = 0;
    private String ca;
    private int tkt = 0;

    /**
     * Creates new form UIFuncionario
     *
     * @param parent
     */
    public UIFuncionario(UIControleEpi parent) {
        initComponents();
        this.uiControleEpi = parent;
        initComponents();
        this.funcionario = uiControleEpi.getFuncionarioDaLinhaSelecionada();
        carregarFuncionario();
        preencherHistorico();
        preencherEpis();
        UIFuncionarioListener();
        configTabelaEpi();
    }

    public int getCodFichaEpi() {
        return codFichaEpi;
    }

    public void setCodFichaEpi(int codFichaEpi) {
        this.codFichaEpi = codFichaEpi;
    }

    public Funcionario getFuncionario() {
        return funcionario;
    }

    public EpiFuncionarioTableModel getEfTableModel() {
        return efTableModel;
    }

    public HistoricoTableModel gethTableModel() {
        return hTableModel;
    }

    public UIControleEpi getUiControleEpi() {
        return uiControleEpi;
    }

    public String getCa() {
        return ca;
    }

    public void setCa(String ca) {
        this.ca = ca;
    }

    private void configTabelaEpi() {

        jtblEpi1.setAutoResizeMode(jtblEpi1.AUTO_RESIZE_OFF);

        jtblEpi1.getColumnModel().getColumn(0).setPreferredWidth(200);//cod
        jtblEpi1.getColumnModel().getColumn(1).setPreferredWidth(300);//nome
        jtblEpi1.getColumnModel().getColumn(2).setMinWidth(0);//preco
        jtblEpi1.getColumnModel().getColumn(2).setPreferredWidth(0);//preco
        jtblEpi1.getColumnModel().getColumn(3).setPreferredWidth(300);//descricao

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlpFuncionario = new javax.swing.JLayeredPane();
        jtfNome = new javax.swing.JTextField();
        jlNome = new javax.swing.JLabel();
        jtfColigada = new javax.swing.JTextField();
        jlColigada = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jlLCodEpiFiltro = new javax.swing.JLabel();
        jtfLCodEpiFiltro = new javax.swing.JTextField();
        jlLNomeEpiFiltro = new javax.swing.JLabel();
        jtfLNomeEpiFiltro = new javax.swing.JTextField();
        jbEPesquisar = new javax.swing.JButton();
        jbAtualizarEpisDoFun = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblEpi1 = new javax.swing.JTable();
        jlpEpi = new javax.swing.JLayeredPane();
        jlLCodEpiHistFiltro = new javax.swing.JLabel();
        jtfLCodEpiHistFiltro = new javax.swing.JTextField();
        jlLNomeEpiHistFiltro = new javax.swing.JLabel();
        jtfLNomeEpiHistFiltro = new javax.swing.JTextField();
        jbHPesquisar = new javax.swing.JButton();
        jbAtualizarHistoricoDoFun = new javax.swing.JButton();
        jbRelatorio = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtEpisDoFunc = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setTitle("Funcionário");

        jlpFuncionario.setBorder(javax.swing.BorderFactory.createTitledBorder("Funcionário"));

        jtfNome.setEditable(false);
        jtfNome.setEnabled(false);

        jlNome.setText("Nome");

        jtfColigada.setEditable(false);
        jtfColigada.setEnabled(false);

        jlColigada.setText("Coligada");

        javax.swing.GroupLayout jlpFuncionarioLayout = new javax.swing.GroupLayout(jlpFuncionario);
        jlpFuncionario.setLayout(jlpFuncionarioLayout);
        jlpFuncionarioLayout.setHorizontalGroup(
            jlpFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jlpFuncionarioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlColigada)
                .addGap(18, 18, 18)
                .addComponent(jtfColigada, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlNome)
                .addGap(18, 18, 18)
                .addComponent(jtfNome, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(212, Short.MAX_VALUE))
        );
        jlpFuncionarioLayout.setVerticalGroup(
            jlpFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jlpFuncionarioLayout.createSequentialGroup()
                .addGroup(jlpFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlColigada)
                    .addComponent(jtfColigada, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlNome)
                    .addComponent(jtfNome, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jlpFuncionario.setLayer(jtfNome, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpFuncionario.setLayer(jlNome, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpFuncionario.setLayer(jtfColigada, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpFuncionario.setLayer(jlColigada, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtrar EPI"));

        jlLCodEpiFiltro.setText("Código do EPI");

        jtfLCodEpiFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfLCodEpiFiltroKeyPressed(evt);
            }
        });

        jlLNomeEpiFiltro.setText("EPI");

        jtfLNomeEpiFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfLNomeEpiFiltroKeyPressed(evt);
            }
        });

        jbEPesquisar.setText("Pesquisar");
        jbEPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEPesquisarActionPerformed(evt);
            }
        });

        jbAtualizarEpisDoFun.setText("Atualizar");
        jbAtualizarEpisDoFun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAtualizarEpisDoFunActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlLCodEpiFiltro)
                .addGap(18, 18, 18)
                .addComponent(jtfLCodEpiFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlLNomeEpiFiltro)
                .addGap(18, 18, 18)
                .addComponent(jtfLNomeEpiFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbAtualizarEpisDoFun)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbEPesquisar)
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jlLCodEpiFiltro)
                    .addComponent(jtfLCodEpiFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlLNomeEpiFiltro)
                    .addComponent(jtfLNomeEpiFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbEPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAtualizarEpisDoFun, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 13, Short.MAX_VALUE))
        );
        jLayeredPane1.setLayer(jlLCodEpiFiltro, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jtfLCodEpiFiltro, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jlLNomeEpiFiltro, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jtfLNomeEpiFiltro, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jbEPesquisar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jbAtualizarEpisDoFun, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jtblEpi1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Código do EPI", "Nome", "Descricao", "CA"
            }
        ));
        jtblEpi1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblEpi1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtblEpi1);

        jlpEpi.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtrar Histórico"));

        jlLCodEpiHistFiltro.setText("Código do EPI");

        jtfLCodEpiHistFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfLCodEpiHistFiltroKeyPressed(evt);
            }
        });

        jlLNomeEpiHistFiltro.setText("EPI");

        jtfLNomeEpiHistFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfLNomeEpiHistFiltroKeyPressed(evt);
            }
        });

        jbHPesquisar.setText("Pesquisar");
        jbHPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbHPesquisarActionPerformed(evt);
            }
        });

        jbAtualizarHistoricoDoFun.setText("Atualizar");
        jbAtualizarHistoricoDoFun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAtualizarHistoricoDoFunActionPerformed(evt);
            }
        });

        jbRelatorio.setText("Relatório");
        jbRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRelatorioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jlpEpiLayout = new javax.swing.GroupLayout(jlpEpi);
        jlpEpi.setLayout(jlpEpiLayout);
        jlpEpiLayout.setHorizontalGroup(
            jlpEpiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jlpEpiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlLCodEpiHistFiltro)
                .addGap(18, 18, 18)
                .addComponent(jtfLCodEpiHistFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlLNomeEpiHistFiltro)
                .addGap(18, 18, 18)
                .addComponent(jtfLNomeEpiHistFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbRelatorio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbAtualizarHistoricoDoFun)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbHPesquisar)
                .addContainerGap())
        );
        jlpEpiLayout.setVerticalGroup(
            jlpEpiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jlpEpiLayout.createSequentialGroup()
                .addGroup(jlpEpiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlLCodEpiHistFiltro)
                    .addComponent(jtfLCodEpiHistFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlLNomeEpiHistFiltro)
                    .addComponent(jtfLNomeEpiHistFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbHPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAtualizarHistoricoDoFun, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jlpEpi.setLayer(jlLCodEpiHistFiltro, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpEpi.setLayer(jtfLCodEpiHistFiltro, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpEpi.setLayer(jlLNomeEpiHistFiltro, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpEpi.setLayer(jtfLNomeEpiHistFiltro, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpEpi.setLayer(jbHPesquisar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpEpi.setLayer(jbAtualizarHistoricoDoFun, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpEpi.setLayer(jbRelatorio, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jtEpisDoFunc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Coligada", "Funcionário", "EPI", "Data Retirada", "Data Devolução", "CA"
            }
        ));
        jtEpisDoFunc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtEpisDoFuncMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jtEpisDoFunc);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jlpFuncionario)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jlpEpi, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlpFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlpEpi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método usado para carregar campos do funcionário selecionado
     */
    public void carregarFuncionario() {
        jtfColigada.setText(String.valueOf(funcionario.getCodColigada()));
        jtfNome.setText(funcionario.getNome());
    }//fecha carregarFuncionario

    /**
     * Método usado para preencher tabela de histórico do funcionário
     */
    public void preencherHistorico() {
        try {
            EpiFuncionarioServicos efs = ServicosFactory.getEPIFUNCIONARIOSERVICOS();
            ArrayList<EpiFuncionario> efa = new ArrayList<>();

            short coligada = funcionario.getCodColigada();
            String chapa = funcionario.getChapa();
            efa = efs.buscarEpisDoFuncionario(coligada, chapa);

            for (int i = 0; i < efa.size(); i++) {
                hTableModel.addRow(efa.get(i));
            }//fecha for
            jtEpisDoFunc.setModel(hTableModel);
        } catch (SQLException se) {
            JOptionPane.showMessageDialog(null, "Erro " + se.getMessage());
        }
    }

    /**
     * Método usado para preencher tabela de EPI's
     */
    public void preencherEpis() {
        try {
            EpiServicos es = ServicosFactory.getEPISERVICOS();
            ArrayList<Epi> ea = es.buscarEpi();

            for (int i = 0; i < ea.size(); i++) {
                eTableModel.addRow(ea.get(i));
            }//fecha for
            jtblEpi1.setModel(eTableModel);

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, 
                    se.getMessage(), 
                    "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Método usado para filtrar tabela de histórico do funcionário
     */
    public void filtrarHistoricoDoFunc() {
        try {
            if (jtfLNomeEpiHistFiltro.getText().isEmpty() && jtfLCodEpiHistFiltro.getText().isEmpty()) {
                preencherHistorico();
            } else {
                EpiFuncionarioServicos efs = ServicosFactory.getEPIFUNCIONARIOSERVICOS();
                String query = null;
                Funcionario funcionarioLinha = uiControleEpi.getFuncionarioDaLinhaSelecionada();
                String chapa = funcionarioLinha.getChapa();
                short coligada = funcionarioLinha.getCodColigada();
                if (!jtfLNomeEpiHistFiltro.getText().isEmpty()) {
                    query = " where ef.CODCOLIGADA = " + coligada + " and ef.CHAPA = '" + chapa + "' and e.NOME like '%" + jtfLNomeEpiHistFiltro.getText() + "%'";
                } else if (!jtfLCodEpiHistFiltro.getText().isEmpty()) {
                    query = " where ef.CODCOLIGADA = " + coligada + " and ef.CHAPA = '" + chapa + "' and ef.CODEPI like '%" + jtfLCodEpiHistFiltro.getText() + "%'";
                }

                ArrayList<EpiFuncionario> efa = efs.filtarEpiFuncionario(query);

                for (int i = 0; i < efa.size(); i++) {
                    hTableModel.addRow(efa.get(i));
                }

                jtEpisDoFunc.setModel(hTableModel);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), 
                    "Erro ao buscar dados do histórico", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Método usado para filtrar tabela de EPI's de funcionários
     */
    public void filtrarEpisDoFunc() {
        try {
            if (jtfLCodEpiFiltro.getText().isEmpty() && jtfLNomeEpiFiltro.getText().isEmpty()) {
                preencherEpis();
            } else {
                EpiServicos es = ServicosFactory.getEPISERVICOS();
                String query = null;

                if (!jtfLCodEpiFiltro.getText().isEmpty()) {
                    query = " where CODEPI like '%" + jtfLCodEpiFiltro.getText() + "%'";
                } else if (!jtfLNomeEpiFiltro.getText().isEmpty()) {
                    query = " where NOME like '%" + jtfLNomeEpiFiltro.getText() + "%'";
                }

                ArrayList<Epi> ea = es.filtrarEpi(query);

                for (int i = 0; i < ea.size(); i++) {
                    eTableModel.addRow(ea.get(i));
                }

                jtblEpi1.setModel(eTableModel);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                    e.getMessage(), "Erro buscar EPI's do colaborador", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Método usado para pegar o registro da tabela de histórico
     *
     * @return EpiFuncionario
     */
    public EpiFuncionario getLinhaHistorico() {
        if (jtEpisDoFunc.getSelectedRow() == -1) {
            return null;
        }

        return hTableModel.getRegistros().get(jtEpisDoFunc.getSelectedRow());
    }

    /**
     * Método usado para pegar o registro da tabela de EPI's
     *
     * @return Epi
     */
    public Epi getLinhaEpi() {
        if (jtblEpi1.getSelectedRow() == -1) {
            return null;
        }

        return eTableModel.getEpis().get(jtblEpi1.getSelectedRow());
    }

    /**
     * Método usado para preencher tabela de histórico
     */
    public void preencherTabelaEpiFuncionario() {
        try {
            EpiFuncionarioServicos efs = ServicosFactory.getEPIFUNCIONARIOSERVICOS();
            ArrayList<EpiFuncionario> efa = efs.buscarEpiFuncionario();
            for (int i = 0; i < efa.size(); i++) {
                efTableModel.addRow(efa.get(i));
            }//fecha for 
            uiControleEpi.jtblEpiFuncionario.setModel(efTableModel);
        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Erro! " + se.getMessage());
        }
    }

    public void cadastrarFichaEpi() {
        FichaEpiDAO dao = DAOFactory.getFICHAEPIDAO();
        try {
            codFichaEpi = dao.cadastrarFicha();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    /**
     * Método usado para atualizar tabela de epis da tela de funcionario
     */
    private void atualizarTblEpis() {
        eTableModel.clear();
        jtfLNomeEpiFiltro.setText("");
        jtfLCodEpiFiltro.setText("");
        preencherEpis();
    }

    /**
     * Método usado para atualizar tabela de historico da tela de funcionario
     */
    private void atualizarTblHis() {
        hTableModel.clearTable();
        jtfLNomeEpiHistFiltro.setText("");
        jtfLCodEpiHistFiltro.setText("");
        preencherHistorico();
    }

    /**
     * Método usado para entregar EPI
     */
    public void inserirHistorico() {
        try {
            EpiFuncionarioDAO epiFuncionarioDAO = DAOFactory.getEpifuncionariodao();
            Epi e = getLinhaEpi();
            if (e != null) {
                LocalServicos ls = ServicosFactory.getLOCALSERVICOS();
                EpiFuncionario entrega = new EpiFuncionario();
                FichaEpi fichaEpi = new FichaEpi();
                Local l = new LocalDAO().buscarLocal();

                fichaEpi.setCodFicha(codFichaEpi);

                //seta valores dentro do objeto ef(EpiFuncionario)
                entrega.setFuncionario(funcionario);
                entrega.setEpi(e);
                entrega.setDataRetirada(LocalDateTime.now());
                entrega.setDataDevolucao(null);
                entrega.setCa(ca);
                entrega.setLatitude(l.getLatitude());
                entrega.setLongitude(l.getLongitude());
                entrega.setEmailEnviado(false);
                entrega.setCreatedBy(Menu.logado.getLogin());
                entrega.setFichaEpi(fichaEpi);

                epiFuncionarioDAO.cadastrarEpiFuncionario(entrega);

                JOptionPane.showMessageDialog(null, "EPI entregue!");

            } else if (getLinhaHistorico() != null) {
                EpiFuncionario devolucao = getLinhaHistorico();
                if (devolucao.getDataDevolucao() != null) {
                    JOptionPane.showMessageDialog(null, "O EPI já foi devolvido!",
                            "Aviso", JOptionPane.WARNING_MESSAGE);
                } else {
                    //altera a data de devolucao
                    devolucao.setDataDevolucao(LocalDateTime.now());
                    devolucao.setModifiedBy(Menu.logado.getLogin());
                    epiFuncionarioDAO.alterarEpiFuncionario(devolucao);

                    JOptionPane.showMessageDialog(null, "EPI devolvido!");
                }
            }

            atualizarTblEpis();
            atualizarTblHis();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(null, se.getMessage(),
                    "Erro ao inserir histórico", JOptionPane.ERROR_MESSAGE);
        }
    }//fecha entregarEpi

    /**
     * Método usado para filtrar tabela de funcionários ao pressionar a tecla
     * ENTER
     *
     * @param evt
     */
    private void jtfLCodEpiFiltroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfLCodEpiFiltroKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            eTableModel.clear();
            filtrarEpisDoFunc();
        }
    }//GEN-LAST:event_jtfLCodEpiFiltroKeyPressed

    /**
     * Método usado para filtrar tabela de EPI's do funcionário ao pressionar a
     * tecla ENTER do teclado
     *
     * @param evt
     */
    private void jtfLNomeEpiFiltroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfLNomeEpiFiltroKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            eTableModel.clear();
            filtrarEpisDoFunc();
        }
    }//GEN-LAST:event_jtfLNomeEpiFiltroKeyPressed

    /**
     * Método usado para pesquisar EPI's do funcionário
     *
     * @param evt
     */
    private void jbEPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEPesquisarActionPerformed
        // TODO add your handling code here:
        eTableModel.clear();
        filtrarEpisDoFunc();
    }//GEN-LAST:event_jbEPesquisarActionPerformed

    /**
     * Método usado para atualizar tabela de EPI's do funcionário
     *
     * @param evt
     */
    private void jbAtualizarEpisDoFunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAtualizarEpisDoFunActionPerformed
        atualizarTblEpis();
    }//GEN-LAST:event_jbAtualizarEpisDoFunActionPerformed

    /**
     * Método usado para pegar o registro do tabela de EPI's ao clicar na mesma
     *
     * @param evt
     */
    private void jtblEpi1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblEpi1MouseClicked
        if (evt.getClickCount() == 2) {
            try {
                Epi epi = getLinhaEpi();
                if (epi != null) {

                    ArrayList<EpiFuncionario> episPendentes;
                    episPendentes = DAOFactory.getEpifuncionariodao().buscarEpisPendentes(funcionario, epi);

                    if (!episPendentes.isEmpty()) {
                        JOptionPane.showMessageDialog(null,
                                "O colaborador já tem o EPI "
                                + epi.getNome()
                                + ", devolva-o para pegar outro.",
                                "Aviso",
                                JOptionPane.WARNING_MESSAGE
                        );
                    } else {

                        atualizarTblHis();
                        Menu telaPrincipal = uiControleEpi.getMenu();
                        UIC uiC = new UIC(UIFuncionario.this);
                        uiC.setLocation(
                                telaPrincipal.getJdpAreaTrabalho().getWidth() / 2 - uiC.getWidth() / 2,
                                telaPrincipal.getJdpAreaTrabalho().getHeight() / 2 - uiC.getHeight() / 2
                        );

                        //adiciona na area de trabalho
                        telaPrincipal.getJdpAreaTrabalho().add(uiC);
                        uiC.setVisible(true);
                    }
                } else {
                    JOptionPane.showMessageDialog(
                            null,
                            "EPI não selecionado",
                            "Aviso",
                            JOptionPane.WARNING_MESSAGE
                    );
                }//teste epi vazio
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_jtblEpi1MouseClicked

    /**
     * Método usado para filtrar tabela de histórico do funcionário ao
     * pressionar tecla ENTER do teclado
     *
     * @param evt
     */
    private void jtfLCodEpiHistFiltroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfLCodEpiHistFiltroKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            hTableModel.clearTable();
            filtrarHistoricoDoFunc();
        }
    }//GEN-LAST:event_jtfLCodEpiHistFiltroKeyPressed

    /**
     * Método usado para filtrar tabela de histórico do funcionário ao
     * pressionar tecla ENTER do teclado
     *
     * @param evt
     */
    private void jtfLNomeEpiHistFiltroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfLNomeEpiHistFiltroKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            hTableModel.clearTable();
            filtrarHistoricoDoFunc();
        }
    }//GEN-LAST:event_jtfLNomeEpiHistFiltroKeyPressed

    /**
     * Método usado para pesquisar dados da tabela de histórico do funcionário
     *
     * @param evt
     */
    private void jbHPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbHPesquisarActionPerformed
        hTableModel.clearTable();
        filtrarHistoricoDoFunc();
    }//GEN-LAST:event_jbHPesquisarActionPerformed

    /**
     * Método usado para atualizar a tabela de histórico do funcionário
     *
     * @param evt
     */
    private void jbAtualizarHistoricoDoFunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAtualizarHistoricoDoFunActionPerformed
        atualizarTblHis();
    }//GEN-LAST:event_jbAtualizarHistoricoDoFunActionPerformed

    /**
     * Método usado para gerar relatório da tabela de funcionários
     *
     * @param evt
     */
    private void jbRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRelatorioActionPerformed
        if (flagRelatorio == false) {
            flagRelatorio = true;
            final UICarregando carregando = new UICarregando(null, false);
            carregando.setVisible(true);
            Thread t = new Thread() {
                @Override
                public void run() {
                    try {
                        Connection con = ConexaoBanco.getConexao();

                        String caminhoCorrente = new File("").getAbsolutePath();

                        String caminhoDoRelatorio = caminhoCorrente + "/relatorios/rel-historico-epis.jasper";

                        JasperPrint jasperPrint;

                        String caminhoDaImagem = caminhoCorrente + "/img/dse-logo-relatorio.png";

                        HashMap filtro = new HashMap();
                        filtro.put("coligada", funcionario.getCodColigada());
                        filtro.put("chapa", funcionario.getChapa());
                        filtro.put("imagem", caminhoDaImagem);

                        jasperPrint = JasperFillManager.fillReport(caminhoDoRelatorio, filtro, con);

                        JasperViewer view = new JasperViewer(jasperPrint, false);

                        view.setVisible(true);

                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "" + ex.getMessage(),
                               "Erro ao carregar dados", JOptionPane.ERROR_MESSAGE);
                    } catch (JRException ex) {
                        JOptionPane.showMessageDialog(null, "" + ex.getMessage(),
                                "Erro ao gerar relatório", JOptionPane.ERROR_MESSAGE);
                    } finally {
                        carregando.dispose();
                    }
                }
            };

            t.start();
        }
    }//GEN-LAST:event_jbRelatorioActionPerformed

    private void abreTelaMotivo(EpiFuncionario historico) {

        LocalDateTime hoje = LocalDateTime.now();
        LocalDateTime dataRetirada = historico.getDataRetirada();

        int periodicidade = historico.getEpi().getPeriodicidade();

        LocalDateTime dataDaProximaRetirada = dataRetirada.plusDays(periodicidade);

        //Testa se o periodo (em dias) é menor que a periodicidade do epi
        if (dataDaProximaRetirada.isAfter(hoje)) {

            new UIMotivo(historico).setVisible(true);

        }
    }

    /**
     * Método usado para abrir tela de devolução de EPI's
     *
     * @param evt
     */
    private void jtEpisDoFuncMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtEpisDoFuncMouseClicked
        if (evt.getClickCount() == 2) {
            EpiFuncionario historico = getLinhaHistorico();
            atualizarTblEpis();
            if (historico != null) {
                if (historico.getDataDevolucao() == null) {
                    if (getCodFichaEpi() == 0) {

                        abreTelaMotivo(historico);

                        new UIDescontar(historico).setVisible(true);

                        uiDevolver = new UIDevolver(this);
                        uiDevolver.setLocation(
                                uiControleEpi.getMenu().getJdpAreaTrabalho().getWidth() / 2 - uiDevolver.getWidth() / 2,
                                uiControleEpi.getMenu().getJdpAreaTrabalho().getHeight() / 2 - uiDevolver.getHeight() / 2
                        );
                        uiControleEpi.getMenu().getJdpAreaTrabalho().add(uiDevolver);
                        uiDevolver.setVisible(true);
                    } else {
                        abreTelaMotivo(historico);
                        new UIDescontar(historico).setVisible(true);
                        inserirHistorico();
                    }
                } else {
                    JOptionPane.showMessageDialog(null,
                            "EPI já foi entregue!",
                            "Aviso",
                            JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Selecione registro!");
            }
            funcionario = uiControleEpi.getFuncionarioDaLinhaSelecionada();

        }
    }//GEN-LAST:event_jtEpisDoFuncMouseClicked

    /**
     * Método usado para gerar mensagem para enviar email
     */
    public void enviarEmail() {
        try {
            EmailJava email = new EmailJava();
            ArrayList<EpiFuncionario> listaEpisNaoEnviados;
            EpiFuncionarioDAO dao = new EpiFuncionarioDAO();
            TicketDAO ticketDao = DAOFactory.getTICKETDAO();
            funcionario = uiControleEpi.getFuncionarioDaLinhaSelecionada();

            EpiFuncionario ef;
            listaEpisNaoEnviados = dao.buscarHistoricoEpisNaoEnviados(funcionario.getCodColigada(), funcionario.getChapa());
            String dataDevolucao = "";
            String linhaTb = "";
            String corLinha = "bgcolor=\"#fff\"";
            for (int i = 0; i < listaEpisNaoEnviados.size(); i++) {
                ef = listaEpisNaoEnviados.get(i);
                if (ef.getDataDevolucao() != null) {
                    dataDevolucao = ef.getDataDevolucao().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"));
                }
                linhaTb = linhaTb
                        + "     <tr>\n"
                        + "        <td align=\"center\">" + ef.getEpi().getCodEpi() + "</td>\n"
                        + "        <td align=\"center\">" + ef.getEpi().getNome() + "</td>\n"
                        + "        <td align=\"center\">" + ef.getDataRetirada()
                        .format(DateTimeFormatter
                                .ofPattern("dd/MM/yyyy HH:mm")) + "</td>\n"
                        + "        <td align=\"center\">" + dataDevolucao + "</td>\n"
                        + "        <td align=\"center\">" + ef.getCa() + "</td>\n"
                        + "        <td align=\"center\"><a href=\"https://www.google.com.br/maps/@"
                        + ef.getLatitude() + "," + ef.getLongitude() + ",17.25z\">Aqui</a></td>\n"
                        + "     </tr>";
                if (corLinha.equals("bgcolor=\"#fff\"")) {
                    corLinha = "bgcolor=\"#eee\"";
                } else {
                    corLinha = "bgcolor=\"#fff\"";
                }
            }

            String msg = "<!DOCTYPE html>"
                    + "<html>\n"
                    + "<head>"
                    + "     <meta charset=\"utf-8\">\n"
                    + "     <style>"
                    + "         span{font-weight: bold;}"
                    + "         h1{"
                    + "             font-weight: bold;"
                    + "             font-size: 16px"
                    + "         }"
                    + "         h2{"
                    + "             font-weight: bold;"
                    + "             font-size: 16px;"
                    + "         }"
                    + "         #rodape{"
                    + "             clear: both;\n"
                    + "             padding-top: 10px;\n"
                    + "          }"
                    + "         table {"
                    + "             border-collapse: collapse;"
                    + "         }"
                    + "         table, th, td {"
                    + "             border: 1px dashed black;"
                    + "         }"
                    + "     </style>"
                    + "</head>"
                    + "<body>\n"
                    + "<h1>Dolphin Soluções em Engenharia</h1>"
                    + "<p>Colaborador: " + funcionario.getNome() + " <br /> \n"
                    + "Chapa: " + funcionario.getChapa() + " <br />\n"
                    + "CPF: " + funcionario.getCpf() + "<br /></p>"
                    + "<h2>Declaração:</h2>"
                    + "<p>Declaro haver recebido gratuitamente da da Dolphin Soluções em Engenharia LTDA as peças componentes do uniforme e os Equipamentos de Proteção Individual (EPI's) conforme relação "
                    + "da tabela abaixo, bem como as instruções de utilização dos mesmos, que me foram indicados pelo Serviço Especializado de Segurança e Medicina do trabalho,  desta "
                    + "empresa. Comprometo-me a utilizá-lo(s) em conformidade com as normas vigentes,  ciente de que em caso da sua não utilização estarei sujeito às penas da lei, que vão "
                    + "desde a advertência, suspensão, até demissão por justa causa. Responsabilizo-me por sua guarda e conservação; estou ciente que terei que devolvê-lo(s) quando sua "
                    + "validade estiver vencida, quando da troca por outro(s) ou em caso de desligamento; caso o(s) extravie(m) ou danifique(m), autorizo desde logo, a empregadora a "
                    + "descontar de meus haveres <span>(Lei 6514 NR6)</span>.</p>"
                    + "<h2>EPI's entregue(s)/devolvido(s)</h2>"
                    + "	<table>\n"
                    + "         <tr align=\"center\" bgcolor=\"#eee\">\n"
                    + "             <th>Código</th>\n"
                    + "             <th>Nome</th>\n"
                    + "             <th>Data/hora da retirada</th>\n"
                    + "             <th>Data/hora da devolução</th>\n"
                    + "             <th>CA</th>\n"
                    + "             <th>Local</th>\n"
                    + "         </tr>\n"
                    + "         <tbody>\n"
                    + linhaTb
                    + "         </tbody>\n"
                    + "     </table>\n"
                    + "<h2>Importante:</h2>"
                    + "1) Para requisição de nova(s) peça(s) de uniforme o funcionário deverá solicitar através do Setor de SMS da Empresa. <br /> \n"
                    + "2) Um EPI novo somente será fornecido mediante a devolução do usado. <br /> \n"
                    + "3) O uso dos equipamentos de proteção pelo empregado é obrigatório por lei, conforme determinado pelo art. 157 da CLT. Não usar equipamentos de proteção pode "
                    + "resultar na rescisão de contrato por justa causa. <br /> \n"
                    + "4) O funcionário deverá manter o uniforme sempre limpo e nunca comparecer ao serviço sem estar uniformizado, dentro dos padrões estabelecidos. <br />"
                    + "5) No caso do desligamento da empresa,  o uniforme deverá ser devolvido completo mesmo estando em estado precário de uso, caso contrári, o funcionário desligado "
                    + "sujeitar-se-á a uma tabela de indenização da empresa. "
                    + "<h2>Ato Faltoso: </h2>\"Constitui ato faltoso do empregado a recusa injustificada à observância das instruções expedidas pelo empregado e ao uso dos EPI's - Equipamentos de "
                    + "proteção individual fornecidos pela empresa\" <span>(Lei 6514 NR6.7.1)</span>."
                    + "</body>"
                    + "<footer id=\"rodape\">"
                    + "<p>*Identificação da entrega/devolução realizada através de biometria ou senha pessoal.</p>"
                    + "<p>Rua Carlos Lacerda, 139 - Sítio Sobrado - Gravataí / RS <br />\n"
                    + "CEP 94180-180 - Fone (51) 3043-5474 <br />\n"
                    + "<a href=\"www.dse.com.br\">www.dse.com.br</a></p>"
                    + "</footer>"
                    + "</html>";

            //envia email se epi foi entregue ou se foi devolvido
            if (!listaEpisNaoEnviados.isEmpty() || !dataDevolucao.isEmpty()) {
                tkt = ticketDao.buscarTicket();
                email.enviarEmail("epi@dse.com.br",
                        "#Ticket " + tkt + " - Comprovante de entrega/devolução de EPI/Uniforme",
                        msg, funcionario.getEmail());

                dao.atualizaEpiEmail(tkt, funcionario.getCodColigada(), funcionario.getChapa());
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "Erro ao enviar email", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Método ouvinte usado para enviar email ao entregar EPI's
     */
    public void UIFuncionarioListener() {
        this.addInternalFrameListener(new InternalFrameAdapter() {

            @Override
            public void internalFrameClosed(InternalFrameEvent event) {
                if (funcionario.getEmail() != null) {
                    uiControleEpi.setFlagFuncionario(false);
                    UICarregando carregando = new UICarregando(null, false);
                    carregando.getjLabel1().setText("Aguarde, enviando comprovante por email...");
                    carregando.setVisible(true);

                    Thread t = new Thread() {
                        @Override
                        public void run() {
                            enviarEmail();
                            uiControleEpi.atualizarTblHistorico();
                            carregando.dispose();
                        }
                    };
                    t.start();
                }
                uiControleEpi.setFlagFuncionario(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbAtualizarEpisDoFun;
    private javax.swing.JButton jbAtualizarHistoricoDoFun;
    private javax.swing.JButton jbEPesquisar;
    private javax.swing.JButton jbHPesquisar;
    private javax.swing.JButton jbRelatorio;
    private javax.swing.JLabel jlColigada;
    private javax.swing.JLabel jlLCodEpiFiltro;
    private javax.swing.JLabel jlLCodEpiHistFiltro;
    private javax.swing.JLabel jlLNomeEpiFiltro;
    private javax.swing.JLabel jlLNomeEpiHistFiltro;
    private javax.swing.JLabel jlNome;
    private javax.swing.JLayeredPane jlpEpi;
    private javax.swing.JLayeredPane jlpFuncionario;
    private javax.swing.JTable jtEpisDoFunc;
    private javax.swing.JTable jtblEpi1;
    private javax.swing.JTextField jtfColigada;
    private javax.swing.JTextField jtfLCodEpiFiltro;
    private javax.swing.JTextField jtfLCodEpiHistFiltro;
    private javax.swing.JTextField jtfLNomeEpiFiltro;
    private javax.swing.JTextField jtfLNomeEpiHistFiltro;
    private javax.swing.JTextField jtfNome;
    // End of variables declaration//GEN-END:variables

}
